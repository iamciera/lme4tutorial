?reorder
cdata3sort
library("lme4")
detach("package:lme4")
library("Matrix")
library("lattice")
detach("package:lme4")
library("lme4")
library("ggplot2")
library("languageR")
modelcheck <- function(model,h=8,w=10.5) {# because plot(lmer.obj) doesn't work
rs <- residuals(model)
fv <- fitted(model)
quartz(h=h,w=w)
plot(rs~fv)
quartz(h=h,w=w)
plot(sqrt(abs(rs))~fv)
quartz(h=h,w=w)
qqnorm(rs)
qqline(rs)
}
library(lme4)
library(ggplot2)
library(languageR)
modelcheck <- function(model,h=8,w=10.5) {# because plot(lmer.obj) doesn't work
rs <- residuals(model)
fv <- fitted(model)
quartz(h=h,w=w)
plot(rs~fv)
quartz(h=h,w=w)
plot(sqrt(abs(rs))~fv)
quartz(h=h,w=w)
qqnorm(rs)
qqline(rs)
}
cortex <- read.csv("~/Desktop/Cortex Counts/Cortexcounts.csv")
cortex
hist(cortex$cellcounts)
head(cortex)
hist(cortex$counts)
hist(cortex$count)
qplot(count, data=cortex, geom="histogram")
qqnorm(cortex$count)
qqline(cortex$count)
cortex$trans_count <- sqrt(cortex$count)
qplot(trans_count, data=cortex, geom="histogram")
cortex <- read.csv("~/Desktop/Cortex Counts/Cortexcounts.csv")
head(cortex)
hist(cortex$count)
qplot(count, data=cortex, geom="histogram")
qplot(count.single, data=cortex, geom="histogram")
qqnorm(cortex$count.single)
qqline(cortex$count.single)
qplot(count.single, data=cortex, geom="histogram")
qplot(count.single, data=cortex, geom="histogram", binwidth=10)
qplot(count.single, data=cortex, geom="histogram", binwidth=10)
qplot(count.single, data=cortex, geom="histogram", binwidth=40)
qplot(count.single, data=cortex, geom="histogram", binwidth=1)
qqline(cortex$count.single)
qplot(count.single, data=cortex, geom="histogram", binwidth=1)
qplot(count.single, data=cortex, geom="histogram", binwidth=2)
qplot(count.single, data=cortex, geom="histogram", binwidth=.5)
qplot(count.single, data=cortex, geom="histogram", binwidth=.2)
qplot(count.single, data=cortex, geom="histogram", binwidth=.5)
qqnorm(cortex$count.single)
qqline(cortex$count.single)
qqnorm(cortex$count.single)
qqline(cortex$count.single)
cortex$trans_count <- sqrt(cortex$count.single)
cortex$trans_count.single <- sqrt(cortex$count.single)
qplot(trans_count.single, data=cortex, geom="histogram")
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=.5)
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=10)
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=.1)
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=.001)
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=.01)
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=.4)
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=.6)
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=.5)
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=.5)
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=10)
qplot(trans_count.single, data=cortex, geom="histogram", binwidth=.5)
cortex$trans_count.single
shapiro.test(cortex$count.single)
shapiro.test(cortex$count.single)
head(cortex)
cortex <- read.csv("~/Desktop/Cortex Counts/Cortexcounts.csv")
head(cortex)
#transformation
hist(cortex$count)
#Let's look at it using ggplot
qplot(count.single, data=cortex, geom="histogram", binwidth=.5)
qqnorm(cortex$count.single)
qqline(cortex$count.single)
# Shapiro Test
shapiro.test(cortex$count.single)
shapiro.test(cortex$count.single)
model1 <- lmer(cortex$count.single ~ cortex$ID + (1|stem$rep))
head(cortex)
model1 <- lmer(cortex$count.single ~ cortex$ID + (1|cortex$rep) + (1|cortex$person))
model2 <- lmer(cortex$count.single ~ cortex$ID + (1|cortex$rep))
model3 <- lmer(cortex$count.single ~ cortex$ID + (1|cortex$person))
anova(model1~model3)
anova(model1, model3)
anova(model1, model2) #
model4 <- lmer(cortex$count.single ~ (1|cortex$rep) + (1|cortex$person))
anova(model1, model4)
modelcheck(model2)
modelcheck(model2)
counts_pvals <- pvals.fnc(model2, addPlot=FALSE, ndigits=16)
counts_pvals$fixed
write.csv(totalarea_pvals$fixed, file = "totalarea.csv")
write.csv(totalarea_pvals$fixed, file = "cortex.csv")
write.csv(counts_pvals$fixed, file = "cortex.csv")
modelcheck(model2)
cortex <- read.csv("~/Desktop/Cortex Counts/Cortexcounts.csv")
head(cortex)
#transformation
hist(cortex$count)
#Let's look at it using ggplot
qplot(count.single, data=cortex, geom="histogram", binwidth=.5)
qqnorm(cortex$count.single)
qqline(cortex$count.single)
# Shapiro Test
shapiro.test(cortex$count.single)
shapiro.test(cortex$count.single)
#####Make sure what you are testing is significant between ILs
##Mixed Effect Linear Modeling
head(cortex)
model1 <- lmer(cortex$count.single ~ cortex$ID + (1|cortex$rep) + (1|cortex$person))
model2 <- lmer(cortex$count.single ~ cortex$ID + (1|cortex$rep))
model3 <- lmer(cortex$count.single ~ cortex$ID + (1|cortex$person))
anova(model1, model2) #P=.6.175e-05, meaning the person who measured did not significantly influence the measurements
anova(model1, model3) #P=.2556, meaning that the 3 reps made a significant difference in the results
model4 <- lmer(cortex$count.single ~ (1|cortex$rep) + (1|cortex$person))
anova(model1, model4) #yay, there is a difference in IL!
#So we want to use model2
#Interpreting the Model
modelcheck(model2)
counts_pvals <- pvals.fnc(model2, addPlot=FALSE, ndigits=16)
counts_pvals$fixed
write.csv(counts_pvals$fixed, file = "cortex.csv")
cortex <- read.csv("~/Desktop/Cortex Counts/Cortexcounts.csv")
cortex <- read.csv("~/Desktop/Cortex Counts/Cortexcounts.csv")
cortex <- read.csv("~/Desktop/Cortex Counts/Cortexcounts.csv")
head(cortex)
modelcheck(model2)
cortex <- read.csv("~/Desktop/Cortex Counts/Cortexcounts.csv")
model1 <- lmer(cortex$count.single ~ cortex$ID + (1|cortex$rep) + (1|cortex$person))
model2 <- lmer(cortex$count.single ~ cortex$ID + (1|cortex$rep))
model3 <- lmer(cortex$count.single ~ cortex$ID + (1|cortex$person))
model4 <- lmer(cortex$count.single ~ (1|cortex$rep) + (1|cortex$person))
modelcheck(model2)
modelcheck(model2)
counts_pvals <- pvals.fnc(model2, addPlot=FALSE, ndigits=16)
cdata <- read.csv("~/Desktop/IL_stems_B_block_forR.csv")
head(cdata) #check
c <- ggplot(cdata2, aes(x=IL.line, y=cortex)) + opts(title="IL Cortex Means")
#Notes on how to get the bar graph of Mean
cdata <- read.csv("~/Desktop/IL_stems_B_block_forR.csv")
head(cdata) #check
levels(cdata$IL.line) #check
summary(cdata$IL.line) #how many measurements per IL
########################################################
#Data Summary
head(cdata)
library(plyr)
cdata2 <- ddply(cdata, .(IL.line), summarise,
N		=length(cortex),
cortex	=mean(cortex),
sd		=sd(cortex),
se		=sd(cortex) / sqrt(length(cortex)) )
head(cdata2)
c <- ggplot(cdata2, aes(x=IL.line, y=cortex)) + opts(title="IL Cortex Means")
c + geom_bar()
cdata3sort <- arrange(cdata2, cortex)
cdata3sort <- arrange(cdata2, cortex)
head(cdata3sort)
cdata3sort
head(cdata3sort)
cdata3sort
c <- ggplot(cdata3sort, aes(x=IL.line, y=cortex)) + opts(title="IL Cortex Means")
c + geom_bar()
cdata3sort$IL.line1
cdata3sort
c + geom_bar(aes(x=cdata3sort$IL.line1))
c + geom_bar(aes(x=cdata3sort$IL.line1))
cdata3sort$IL.line1 <- reorder(cdata3sort$IL.line, cdata3sort$cortex)
c + geom_bar(aes(x=cdata3sort$IL.line1))
install.packages("markdown")
library("markdown")
mardownHTML
source('~/Desktop/Dan\'s Stats Talk/Modeling_example.R')
print(markdownToHTML(text='Hello World!'))
markdownToHTML(/Users/iamciera/Desktop/Dan's Stats Talk, /Users/iamciera/Desktop/Dan's Stats Talk)
2+2
SD.Fgrp2<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp3<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp4<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp5<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp6<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp7<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp8<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp1<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp2<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp3<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp4<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp5<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp6<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp7<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp8<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp9Female.9grp
colnames(Female.8grp)<-c("Control","t1","t2","t3","t4","t5","t6","t7","t8")
SD.Fgrp1<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp1
SD.Fgrp10<- cbind(SD.Fgrp19, SD.Fgrp2<-sample)
SD.Fgrp10<- cbind(SD.Fgrp9, SD.Fgrp2<-sample)
SD.Fgrp9<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp10<- cbind(SD.Fgrp9, SD.Fgrp2<-sample)
SD.Fgrp10
SD.Fgrp10<- cbind(SD.Fgrp9, SD.Fgrp2, SD.Fgrp3, SD.Fgrp4, SD.Fgrp5, SD.Fgrp6, SD.Fgrp7, SD.Fgrp8, SD.Fgrp9)  )
SD.Fgrp10<- cbind(SD.Fgrp9, SD.Fgrp2, SD.Fgrp3, SD.Fgrp4, SD.Fgrp5, SD.Fgrp6, SD.Fgrp7, SD.Fgrp8, SD.Fgrp9)
all<- cbind(SD.Fgrp9, SD.Fgrp2, SD.Fgrp3, SD.Fgrp4, SD.Fgrp5, SD.Fgrp6, SD.Fgrp7, SD.Fgrp8, SD.Fgrp9)
colnames(all)<-c("Control","t1","t2","t3","t4","t5","t6","t7","t8")
all
all<- cbind(SD.Fgrp1, SD.Fgrp2, SD.Fgrp3, SD.Fgrp4, SD.Fgrp5, SD.Fgrp6, SD.Fgrp7, SD.Fgrp8, SD.Fgrp9)
colnames(all)<-c("Control","t1","t2","t3","t4","t5","t6","t7","t8")
all
SD.Fgrp2<-sample(c(0,1),10,replace=T,c(0.28,0.72))
colnames(all)<-c("Control","t1","t2","t3","t4","t5","t6","t7","t8")
all<- cbind(SD.Fgrp1, SD.Fgrp2, SD.Fgrp3, SD.Fgrp4, SD.Fgrp5, SD.Fgrp6, SD.Fgrp7, SD.Fgrp8, SD.Fgrp9)
colnames(all)<-c("Control","t1","t2","t3","t4","t5","t6","t7","t8")
all
sum(SD.Fgrp8)
sum(SD.Fgrp8)/90
sum(SD.Fgrp8)/10
SD.Fgrp1<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp2<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp3<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp4<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp5<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp6<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp7<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp8<-sample(c(0,1),10,replace=T,c(0.28,0.72))
SD.Fgrp9<-sample(c(0,1),10,replace=T,c(0.28,0.72))
library(goseq)
install.packages("goseq")
install.packages("GO.db")
library(ggplot2)
install.packages("MASS")
install.packages("phytools")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("qpcR")
install.packages("pmc")
install.packages("reshape")
install.packages("calibrate")
require(phytools)
install.packages("numDeriv")
install.packages("phangorm")
require(phytools)
install.packages("phangorn")
install.packages("geiger")
install.packages("VennDiagram")
install.packages("VennDiagram")
library(VennDiagram)
ratings.budget.matrix <- matrix(c(243, (1064 - 243), (4072 - 243), (58788 - 4072 - 1064 + 243)),
2, 2,
dimnames = list(set=c("low.budget", "not.low.budget"),
class = c("high.rated", "not.high.rated")))
fisher.test(ratings.budget.matrix)
knit(Rcourse2013.rmd)
library(knitr)
knit(Rcourse2013.rmd)
knit("Rcourse2013.rmd")
